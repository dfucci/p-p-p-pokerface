(rank "2H")
(in-ns 'p-p-p-pokerface)
(rank "2H")
(in-ns 'p-p-p-pokerface.core)
(rank "2H")
la
ls
(uaw 'p-p-p-pokerface.core)
(use 'p-p-p-pokerface.core)
(use 'p-p-p-pokerface)
exit
(use 'p-p-p-pokerface)
(rank "2H")
exit
(use 'p-p-p-pokerface)
(rank "2H")
(def pair-hand                    ["2H" "2S" "4C" "5C" "7D"])
(apply rank pair-hand)
(frequencies pair-hand)
(rank pair-hand)
(apply rank pair-hand)
(map rank pair-hand)
(frequencies (map rank pair-hand))
(vals (frequencies (map rank pair-hand)))
(type (vals (frequencies (map rank pair-hand))))
(max (vals (frequencies (map rank pair-hand))))
(apply max (vals (frequencies (map rank pair-hand))))
(= 2 (apply max (vals (frequencies (map rank pair-hand))))
)
(def pair-hand                    ["2H" "2S" "4C" "5C" "7D"])
(def two-pairs-hand               ["2H" "2S" "4C" "4D" "7D"])
(defn two-pair? [hand] 
(= '(2 2) (vals (frequencies  (map rank hand))))) 
(nth 2 '(3 4 6))
(nth  '(3 4 6) 2)
(take 2  '(3 4 6) )
(range 10 5)
(range 1 5)
(ns p-p-p-pokerface)
(map first checker)
checkers
checker
(checker)
(apply (map first checker) low-ace-straight-hand)
(doc filter)
(Doc filter)
(filter (map first checker) low-ace-straight-hand)
(apply (first(map first checker)) low-ace-straight-hand)
(first (map first checker)) 
((first (map first checker)) high-ace-straight-hand)
(filter zero? [0 3 5 6])
(filter zero? [2 3 5 6])
(filter #((first %) hand) checkers)
(filter #((first %) high-ace-straight-hand) checkers)
(filter #((first %) high-ace-straight-hand) checker)
(doc filter)
(filter str)
(filter str? ["1" 2 3})
(filter str? ["1" 2 3])
(filter string? ["1" 2 3])
 #((first %) high-ace-straight-hand)
( #((first %) high-ace-straight-hand))
(defn my-weird-fun [hand] (first hand))
(my-weird-fun high-ace-straight-hand)
(filter #((first %) high-ace-straight-hand) checker)
(filter (fn [hand] ((first checker) hand)
)
(filter (fn [hand] ((first checker) hand) checker)
)
(filter (fn [hand] ((first checker) hand)))
(filter ((fn [hand] ((first checker) hand))))
(filter #((first %) high-ace-straight-hand) checker)
(filter ((fn [] ((first checker) high-ace-straight-hand))))
(filter ((fn [_] ((first checker) high-ace-straight-hand))))
(filter (fn [_] ((first checker) high-ace-straight-hand)))
(filter #((first %) high-ace-straight-hand) checker)
(filter (fn [c] ((fist c) high-ace-straight-hand) checker))
(filter (fn [c] ((first c) high-ace-straight-hand) checker))
(filter (fn [c] ((first c) high-ace-straight-hand)) checker)
(map second (filter (fn [c] ((first c) high-ace-straight-hand)) checker))
(max (map second (filter (fn [c] ((first c) high-ace-straight-hand)) checker)))
(apply (max (map second (filter (fn [c] ((first c) high-ace-straight-hand)) checker))))
(apply max (map second (filter (fn [c] ((first c) high-ace-straight-hand)) checker))))
(apply max (map second (filter (fn [c] ((first c) high-ace-straight-hand)) checker)))
(consecutive? '(1 2 3 4)
)
